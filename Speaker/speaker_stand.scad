//
// Speaker Stand
//
// by Yasuhiro Wabiko
//
// This work is licensed under a Creative Commons Attribution 4.0 International License.
// https://creativecommons.org/licenses/by/4.0/
//
use <prim.scad>

default_stand_z =40;
default_base_x = 36;
default_base_y = 36;
default_base_z = 4;
default_base_r = 2;
default_pole_r = 4; // pole body radius
default_pole_z = 36;
default_pole_rr = 1; // pole corner radius
default_joint_z = 2;
default_joint_extra_z = 0;
default_joint_r = 3;


WELDING = 0.1;

// render target; this is meant to be overriden by Makefile
TARGET="default";

//
// top level logic
//
speaker_stand_main();

module speaker_stand_main(target=TARGET){
    
    if (target == "default") {
        speaker_stand(stand_z=40, base_x=30, base_y=30, pole_r=8);
    }

    if (target == "ce32a") {
        speaker_stand(stand_z=40, base_x=(36-2)*0.8, base_y=(36-2)*0.8, pole_r=4);
    }

    if (target == "ce32a_type2") {
        speaker_stand(stand_z=40, base_x=(33.2-2)*0.8, base_y=(33.2-2)*0.8, pole_r=4);
    }

    if (target == "b1s") {
        speaker_stand(stand_z=40, base_x=(40-2)*0.8, base_y=(40-2)*0.8, pole_r=4);
    }

    if (target == "ce32a_tallboy") {
        speaker_stand(stand_z=40, base_z=0, pole_r=18, base_x=32*0.8, base_y=32*0.8);
    }

    if (target == "b1s_tallboy") {
        speaker_stand(stand_z=40, base_x=(40-2)*0.8, base_y=(40-2)*0.8, pole_r=4);
    }

}

// [Public]
// A speaker stand.
//
// stand_z = total height (= base height + pole height) i.e how high the speaker is put from the ground.
// (base_x, base_y, base_z, base_r) = stand base dimension
// (joint_z, joint_r) = joint configuration
// pole_r = pole radius
//
// NOTE: pole height is generated by total height - base_height.
module speaker_stand(stand_z = default_stand_z,
                     base_x = default_base_x,
                     base_y = default_base_y,
                     base_z = default_base_z,
                     base_r = default_base_r,
                     joint_r = default_joint_r,
                     joint_z = default_joint_z,
                     pole_r = default_pole_r,
                     pole_rr = default_pole_rr) {

    pole_z = stand_z-base_z;

    speaker_stand_unit(stand_z = stand_z,
                       base_x = base_x,
                       base_y = base_y,
                       base_z = base_z,
                       base_r = base_r,
                       joint_r = joint_r,
                       joint_z = joint_z,
                       pole_r = pole_r,
                       pole_z = pole_z,
                       pole_rr = default_pole_rr );
}

// (for testing) when you want to override design parameters in detail
module speaker_stand_unit(stand_z = default_stand_z,
                          base_x = default_base_x,
                          base_y = default_base_y,
                          base_z = default_base_z,
                          base_r = default_base_r,
                          joint_r = default_joint_r,
                          joint_z = default_joint_z,
                          joint_extra_z  = default_joint_extra_z,
                          pole_r = default_pole_r,
                          pole_z = default_pole_z,
                          pole_rr = default_pole_rr,
                          joint_fn = 32,
                          pole_fn = 64,
                          base_fn = 64,
                          clip_z = 0.6) {
    clip_r = joint_r;
    
    translate([0, 0, 0]) {
        // base plate
        translate([0, 0, base_z/2]) {
            prim_round_zplate0(base_x, base_y, base_z, base_r, base_fn);
        }

        translate([0, 0, pole_z/2]) {
            difference() {
                union() {
                    // pole (inner joint)
                    translate([0, 0, pole_z/2+joint_z/2-WELDING+clip_z/2]) {
                        cylinder(r = joint_r, $fn = joint_fn, h = joint_z+WELDING+clip_z, center=true);
                    }

                    // clip
                    translate([0, 0, pole_z/2+joint_z+clip_z/2]) {
                        minkowski() {
                            cylinder(r = clip_r, $fn = joint_fn, h = 0.2, center=true);
                            sphere(r=0.2, $fn=32);
                        }
                    }
                }
                union() {
                    // slits for easier joint 
                    translate([0, 0, pole_z/2]) {
                        for (i=[0:1:7]) {
                            rotate([0,0,45*i]) {
                                cube([8, 0.4, joint_z*6], center=true);
                            }
                        }
                    }

                    // pole (empty inside)
                    translate([0, 0, pole_z/2+joint_z/2-WELDING+clip_z/2]) {
                        //    cylinder(r = joint_r-0.5, $fn = joint_fn, h = joint_z+WELDING*4+clip_z, center=true);
                    }
                }
            } // difference

            // pole (outer)
            translate([0, 0, base_z/2-WELDING]) {
                //cylinder(r = pole_r, $fn = pole_fn, h = pole_z-base_z+WELDING, center=true);
                prim_round_zplate0(pole_r*2, pole_r*2, pole_z-base_z+WELDING, pole_rr, 32);
            }

            // pole (joint's inner stuffing for more strength)
            translate([0, 0, pole_z/2+joint_z/2-WELDING+clip_z/2]) {
                cylinder(r = clip_r-1, $fn = joint_fn, h = joint_z+WELDING+clip_z, center=true);
            }
        }
    }
}
